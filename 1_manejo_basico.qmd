---
title: "Introducci√≥n al paquete {targets}"
subtitle: "Manejo b√°sico"
author: "Depto. Data Science<br>Okuant"
date: today
---
# Introducci√≥n

## Qu√© es targets

El paquete targets es una herramienta de flujo de trabajo similar a Make para la estad√≠stica y la ciencia de los datos en R. Con targets, se puede mantener un flujo de trabajo reproducible sin repetirse. Entre sus principales caracter√≠sticas est√° el evitar la ejecuci√≥n de tareas que ya est√°n actualizadas, ejecutando s√≥lo el c√°lculo necesario. Adem√°s, admite computaci√≥n paralela impl√≠cita, abstrae los archivos como objetos de R y muestra pruebas tangibles de que los resultados coinciden con el c√≥digo y los datos subyacentes.

## Estructura del proyecto

Se sigue la estructura b√°sica de un proyecto de R:

```
üì¶ targets_tutorial
 ‚î£ üìÇ data                      # Datos necesarios para el proyecto
 ‚îÉ  ‚îó üìÇ raw                 
 ‚î£ üìÇ src                       # Archivos de c√≥digo espec√≠fico
 ‚îÉ  ‚îó üìú functions.R
 ‚î£ üìÇ _targets                  # Datos y metadatos de targets
 ‚î£ üìú _targets.R                # Definici√≥n del pipeline
 ‚î£ üìú README.md                 # Descripcion del proyecto
 ‚î£ üìú main.R                    # Script para lanzar el pipeline
 ‚îó üìú .gitignore

```

## Correr el pipeline
```
> tar_make()
‚Ä¢ start target exams_file
‚Ä¢ built target exams_file [0.196 seconds]
‚Ä¢ start target exams
‚Ä¢ built target exams [0.007 seconds]
‚Ä¢ start target model
‚Ä¢ built target model [0.012 seconds]
‚Ä¢ start target plot
‚Ä¢ built target plot [0.014 seconds]
‚Ä¢ end pipeline [0.535 seconds]
```

## El archivo `_targets.R`
El coraz√≥n de `targets`, donde definimos el pipeline:
```{r, eval = FALSE, echo = TRUE}
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
library(data.table)
library(magrittr)


# Set target options:
tar_option_set(
  packages = c("ggplot2"), # packages that your targets need to run
  format = "rds"           # default storage format
)

# Load the R scripts with your custom functions:
source("src/functions.R")
# Or source everything in src/ folder:
# lapply(list.files("src", full.names = TRUE, recursive = TRUE), source)

# Define sub-pipeline (input)
input_pl <- list(
  tar_target(exams_file, "data/raw/exams.csv", format = "file")
)

# Define sub-pipeline (main)
main_pl <- list(
  tar_target(
    exams,
    exams_file %>% 
      fread() %>% 
      rename_data()
  ),
  
  tar_target(
    model,
    fit_model(exams)
  ),
  
  tar_target(
    plot,
    plot_model(exams, model)
  )
)

# Output: concatenate sub-pipelines
c(
  input_pl,
  main_pl
)
```

## Monitorizar el pipeline
Tenemos dos opciones principales:

`tar_manifest()` devuelve un `tibble` resumiendo el nombre de cada target y el
comando asociado:
```
> tar_manifest()
# A tibble: 4 √ó 2
  name       command                                   
  <chr>      <chr>                                     
1 exams_file "\"data/raw/exams.csv\""                  
2 exams      "exams_file %>% fread() %>% rename_data()"
3 model      "fit_model(exams)"                        
4 plot       "plot_model(exams, model)"    
```

Para una representaci√≥n gr√°fica del pipeline tenemos la funci√≥n `tar_visnetwork()`:

```{r, echo = FALSE}
htmltools::includeHTML("resources/ex_vn_errored.html")

```


